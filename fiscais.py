# -*- coding: utf-8 -*-
"""Untitled13.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13lGEaGg0iFqkdbjSa66fQ0Huz6caAKz3
"""

import pandas as pd
import folium
from flask import Flask
import os

app = Flask(__name__)

@app.route('/')
def mapa():
    try:
        # Verificar se o arquivo existe
        csv_path = 'coordenadas2.csv'
        if not os.path.exists(csv_path):
            return "Erro: O arquivo coordenadas2.csv não foi encontrado."

        # Lendo o CSV
        df = pd.read_csv(csv_path, sep=';', encoding='utf-8')

        # Criando o mapa
        mapa = folium.Map(location=[-23.5489, -46.6388], zoom_start=7)

        # Adicionando marcadores com cores baseadas no status
        for index, row in df.iterrows():
            if pd.isna(row['Latitude']) or pd.isna(row['Longitude']) or pd.isna(row['Status']):
                continue

            popup_text = f"<div style='font-size: 18px;'>{row.get('Nome', 'Sem Nome')}<br>Data: {row.get('Data', 'Sem Data')}<br>Atividade: {row.get('Atividade', 'Sem Atividade')}</div>"

            status = str(row['Status']).lower().strip()
            if status == 'finalizada':
                marker_color = 'green'
            elif status == 'em_andamento':
                marker_color = 'blue'
            elif status == 'cancelada':
                marker_color = 'red'
            else:
                marker_color = 'gray'

            folium.Marker(
                location=[row["Latitude"], row["Longitude"]],
                popup=folium.Popup(popup_text, max_width=300),
                icon=folium.Icon(color=marker_color)
            ).add_to(mapa)

        # Adicionando o título no topo
        title_html = '''
        <div style="position: fixed; top: 10px; left: 50%; transform: translateX(-50%); z-index: 1000; padding: 10px; background-color: #f0f0f0; border: 2px solid gray; border-radius: 5px;">
            <h1 style="font-size: 24px; color: #333; margin: 0; text-align: center;">Acompanhamento de Fiscais</h1>
        </div>
        '''

        # Criando a legenda com todos os funcionários por status
        legend_entries = {
            'finalizada': df[df['Status'].str.lower() == 'finalizada']['Nome'].tolist() or ['N/A'],
            'em_andamento': df[df['Status'].str.lower() == 'em_andamento']['Nome'].tolist() or ['N/A'],
            'cancelada': df[df['Status'].str.lower() == 'cancelada']['Nome'].tolist() or ['N/A']
        }
        legend_html = '''
        <div style="position: fixed; top: 60px; right: 10px; z-index: 1000; padding: 10px; background-color: white; border: 2px solid gray; border-radius: 5px; max-width: 200px;">
            <p><strong>Status do Serviço</strong></p>
            <p><i class="fa fa-map-marker" style="color:green"></i> Finalizada - {finalizada}<br>
               <i class="fa fa-map-marker" style="color:blue"></i> Em Andamento - {em_andamento}<br>
               <i class="fa fa-map-marker" style="color:red"></i> Cancelada - {cancelada}</p>
        </div>
        '''.format(
            finalizada=', '.join(legend_entries['finalizada']),
            em_andamento=', '.join(legend_entries['em_andamento']),
            cancelada=', '.join(legend_entries['cancelada'])
        )

        # Adicionando a escala (inferior direito)
        scale_html = '''
        <div style="position: fixed; bottom: 10px; right: 10px; z-index: 1000; padding: 5px; background-color: white; border: 2px solid gray; border-radius: 5px;">
            <p><strong>Escala</strong></p>
            <p>1 cm = 100 km</p>
        </div>
        '''

        # Adicionando título, legenda e escala ao mapa
        mapa.get_root().html.add_child(folium.Element(title_html))
        mapa.get_root().html.add_child(folium.Element(legend_html))
        mapa.get_root().html.add_child(folium.Element(scale_html))

        # Retornando apenas o HTML do mapa
        return mapa._repr_html_()

    except Exception as e:
        return f"Erro ao carregar o mapa: {str(e)}"

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port)